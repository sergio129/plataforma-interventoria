# Script de prueba de la API de Plataforma de Interventor√≠a
# Ejecutar: .\test-api.ps1

Write-Host "üß™ Iniciando pruebas de la API..." -ForegroundColor Cyan

# Verificar que el servidor est√© corriendo
Write-Host "`n1. Verificando que el servidor est√© activo..." -ForegroundColor Yellow
try {
    $response = Invoke-RestMethod -Uri "http://localhost:3000/api/health" -Method GET
    Write-Host "‚úÖ Servidor activo" -ForegroundColor Green
    Write-Host "   Status: $($response.status)" -ForegroundColor Gray
    Write-Host "   Environment: $($response.environment)" -ForegroundColor Gray
} catch {
    Write-Host "‚ùå Error: El servidor no est√° activo en el puerto 3000" -ForegroundColor Red
    Write-Host "   Aseg√∫rate de ejecutar 'npm run dev' primero" -ForegroundColor Red
    exit 1
}

# Obtener informaci√≥n de la API
Write-Host "`n2. Obteniendo informaci√≥n de la API..." -ForegroundColor Yellow
try {
    $apiInfo = Invoke-RestMethod -Uri "http://localhost:3000/api" -Method GET
    Write-Host "‚úÖ API activa" -ForegroundColor Green
    Write-Host "   Version: $($apiInfo.version)" -ForegroundColor Gray
    Write-Host "   Endpoints disponibles:" -ForegroundColor Gray
    $apiInfo.endpoints.PSObject.Properties | ForEach-Object {
        Write-Host "     - $($_.Name): $($_.Value)" -ForegroundColor Gray
    }
} catch {
    Write-Host "‚ùå Error al obtener informaci√≥n de la API" -ForegroundColor Red
}

# Test de login con admin
Write-Host "`n3. Probando login como administrador..." -ForegroundColor Yellow
$loginData = @{
    email = "admin@interventoria.com"
    password = "123456"
} | ConvertTo-Json

$headers = @{
    "Content-Type" = "application/json"
}

try {
    $loginResponse = Invoke-RestMethod -Uri "http://localhost:3000/api/auth/login" -Method POST -Body $loginData -Headers $headers
    Write-Host "‚úÖ Login exitoso" -ForegroundColor Green
    Write-Host "   Usuario: $($loginResponse.data.usuario.nombre) $($loginResponse.data.usuario.apellido)" -ForegroundColor Gray
    Write-Host "   Tipo: $($loginResponse.data.usuario.tipoUsuario)" -ForegroundColor Gray
    Write-Host "   Token generado: $($loginResponse.data.token.Substring(0, 20))..." -ForegroundColor Gray
    
    $adminToken = $loginResponse.data.token
    
    # Test de obtener perfil
    Write-Host "`n4. Obteniendo perfil del usuario..." -ForegroundColor Yellow
    $authHeaders = @{
        "Authorization" = "Bearer $adminToken"
        "Content-Type" = "application/json"
    }
    
    try {
        $profileResponse = Invoke-RestMethod -Uri "http://localhost:3000/api/auth/perfil" -Method GET -Headers $authHeaders
        Write-Host "‚úÖ Perfil obtenido exitosamente" -ForegroundColor Green
        Write-Host "   Email: $($profileResponse.data.email)" -ForegroundColor Gray
        Write-Host "   Profesi√≥n: $($profileResponse.data.profesion)" -ForegroundColor Gray
    } catch {
        Write-Host "‚ùå Error al obtener perfil: $($_.Exception.Message)" -ForegroundColor Red
    }
    
    # Test de listar usuarios
    Write-Host "`n5. Listando usuarios (solo admin)..." -ForegroundColor Yellow
    try {
        $usuariosResponse = Invoke-RestMethod -Uri "http://localhost:3000/api/usuarios" -Method GET -Headers $authHeaders
        Write-Host "‚úÖ Lista de usuarios obtenida" -ForegroundColor Green
        Write-Host "   Total de usuarios: $($usuariosResponse.data.usuarios.Count)" -ForegroundColor Gray
        Write-Host "   Usuarios:" -ForegroundColor Gray
        $usuariosResponse.data.usuarios | ForEach-Object {
            Write-Host "     - $($_.nombre) $($_.apellido) ($($_.tipoUsuario))" -ForegroundColor Gray
        }
    } catch {
        Write-Host "‚ùå Error al listar usuarios: $($_.Exception.Message)" -ForegroundColor Red
    }
    
    # Test de estad√≠sticas
    Write-Host "`n6. Obteniendo estad√≠sticas de usuarios..." -ForegroundColor Yellow
    try {
        $statsResponse = Invoke-RestMethod -Uri "http://localhost:3000/api/usuarios/estadisticas" -Method GET -Headers $authHeaders
        Write-Host "‚úÖ Estad√≠sticas obtenidas" -ForegroundColor Green
        Write-Host "   Total usuarios: $($statsResponse.data.resumen.total)" -ForegroundColor Gray
        Write-Host "   Usuarios activos: $($statsResponse.data.resumen.activos)" -ForegroundColor Gray
        Write-Host "   Usuarios inactivos: $($statsResponse.data.resumen.inactivos)" -ForegroundColor Gray
    } catch {
        Write-Host "‚ùå Error al obtener estad√≠sticas: $($_.Exception.Message)" -ForegroundColor Red
    }
    
} catch {
    Write-Host "‚ùå Error en login: $($_.Exception.Message)" -ForegroundColor Red
}

# Test de login con credenciales incorrectas
Write-Host "`n7. Probando login con credenciales incorrectas..." -ForegroundColor Yellow
$badLoginData = @{
    email = "admin@interventoria.com"
    password = "wrongpassword"
} | ConvertTo-Json

try {
    $badLoginResponse = Invoke-RestMethod -Uri "http://localhost:3000/api/auth/login" -Method POST -Body $badLoginData -Headers $headers
    Write-Host "‚ùå Error: Login deber√≠a haber fallado" -ForegroundColor Red
} catch {
    if ($_.Exception.Response.StatusCode -eq 401) {
        Write-Host "‚úÖ Login correctamente rechazado (401 Unauthorized)" -ForegroundColor Green
    } else {
        Write-Host "‚ùå Error inesperado: $($_.Exception.Message)" -ForegroundColor Red
    }
}

# Test de acceso sin token
Write-Host "`n8. Probando acceso a ruta protegida sin token..." -ForegroundColor Yellow
try {
    $noTokenResponse = Invoke-RestMethod -Uri "http://localhost:3000/api/auth/perfil" -Method GET
    Write-Host "‚ùå Error: Acceso deber√≠a haber sido denegado" -ForegroundColor Red
} catch {
    if ($_.Exception.Response.StatusCode -eq 401) {
        Write-Host "‚úÖ Acceso correctamente denegado (401 Unauthorized)" -ForegroundColor Green
    } else {
        Write-Host "‚ùå Error inesperado: $($_.Exception.Message)" -ForegroundColor Red
    }
}

Write-Host "`nüéâ Pruebas completadas!" -ForegroundColor Cyan
Write-Host "La API est√° funcionando correctamente." -ForegroundColor Green